// ** CyGpsSatellites Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CY_GPS_SATELLITES_H
#define _MZN_CMD_CY_GPS_SATELLITES_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CyGpsSatellites : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CyGpsSatellites const & cmd);

public:

    explicit CyGpsSatellites();
    ~CyGpsSatellites() = default;

    CyGpsSatellites(CyGpsSatellites && rhs) = default;
    CyGpsSatellites & operator=(CyGpsSatellites && rhs) = default;
    CyGpsSatellites(CyGpsSatellites const & rhs) = default;
    CyGpsSatellites & operator=(CyGpsSatellites const & rhs) = default;
    std::string const cmd_name = "cy_gps_satellites";

    CmdField<uint16_t> satellite_number;
    CmdField<int16_t> elevation;
    CmdField<int16_t> azimuth;
    CmdField<int16_t> snr;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CyGpsSatellites const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CY_GPS_SATELLITES_H
