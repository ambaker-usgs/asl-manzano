// ** CxEthernetStatus Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_ETHERNET_STATUS_H
#define _MZN_CMD_CX_ETHERNET_STATUS_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxEthernetStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxEthernetStatus const & cmd);

public:

    explicit CxEthernetStatus();
    ~CxEthernetStatus() = default;

    CxEthernetStatus(CxEthernetStatus && rhs) = default;
    CxEthernetStatus & operator=(CxEthernetStatus && rhs) = default;
    CxEthernetStatus(CxEthernetStatus const & rhs) = default;
    CxEthernetStatus & operator=(CxEthernetStatus const & rhs) = default;
    std::string const cmd_name = "cx_ethernet_status";

    CmdField<uint32_t> receive_checksum_errors;
    CmdField<uint32_t> total_io_errors;
    CmdField<uint16_t> physical_interface_number;
    CmdFieldIgnore<uint16_t> spare_1;
    CmdField<uint32_t> destination_unreachable_icmp_packets_received;
    CmdField<uint32_t> source_quench_icmp_packets_received;
    CmdField<uint32_t> echo_request_icmp_packets_received;
    CmdField<uint32_t> redirect_icmp_packets_received;
    CmdField<uint32_t> runt_frames;
    CmdField<uint32_t> crc_errors;
    CmdField<uint32_t> broadcast_frames;
    CmdField<uint32_t> unicast_frames;
    CmdField<uint32_t> total_good_frames;
    CmdField<uint32_t> jabber_errors;
    CmdField<uint32_t> out_of_window;
    CmdField<uint32_t> transmitted_ok;
    CmdField<uint32_t> received_packets_missed;
    CmdField<uint32_t> transmit_collisions;
    BmEthernetLinkstatus current_link_status;
    CmdFieldIgnore<uint16_t> spare_2;
    CmdFieldIgnore<uint32_t> spare_3;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxEthernetStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_ETHERNET_STATUS_H
