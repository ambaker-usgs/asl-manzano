// ** CxPowerSupplyStatus Class ** //
// Autogenerated in QDP Commands ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_POWER_SUPPLY_STATUS_H
#define _MZN_CMD_CX_POWER_SUPPLY_STATUS_H

#include "command.h"

namespace mzn {
class CxPowerSupplyStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxPowerSupplyStatus const & cmd);

public:

    explicit CxPowerSupplyStatus();
    ~CxPowerSupplyStatus() = default;

    CxPowerSupplyStatus(CxPowerSupplyStatus && rhs) = default;
    CxPowerSupplyStatus & operator=(CxPowerSupplyStatus && rhs) = default;
    CxPowerSupplyStatus(CxPowerSupplyStatus const & rhs) = default;
    CxPowerSupplyStatus & operator=(CxPowerSupplyStatus const & rhs) = default;
    std::string const cmd_name = "cx_power_supply_status";

    BmChargingPhase charging_phase;
    CmdField<int16_t> battery_temperature;
    CmdField<uint16_t> battery_capacity;
    CmdField<uint16_t> depth_of_discharge;
    CmdField<int16_t> battery_voltage;
    CmdField<int16_t> input_voltage;
    CmdField<int16_t> battery_current;
    CmdField<int16_t> absorption_set_point;
    CmdField<int16_t> float_set_point;
    BmAlerts alerts;
    BmLoadsOff loads_off;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxPowerSupplyStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_POWER_SUPPLY_STATUS_H
