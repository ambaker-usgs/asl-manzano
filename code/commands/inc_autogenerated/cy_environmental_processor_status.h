// ** CyEnvironmentalProcessorStatus Class ** //
// Autogenerated in QDP Commands ** //
// Manzano Software //

#ifndef _MZN_CMD_CY_ENVIRONMENTAL_PROCESSOR_STATUS_H
#define _MZN_CMD_CY_ENVIRONMENTAL_PROCESSOR_STATUS_H

#include "command.h"

namespace mzn {
class CyEnvironmentalProcessorStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CyEnvironmentalProcessorStatus const & cmd);

public:

    explicit CyEnvironmentalProcessorStatus();
    ~CyEnvironmentalProcessorStatus() = default;

    CyEnvironmentalProcessorStatus(CyEnvironmentalProcessorStatus && rhs) = default;
    CyEnvironmentalProcessorStatus & operator=(CyEnvironmentalProcessorStatus && rhs) = default;
    CyEnvironmentalProcessorStatus(CyEnvironmentalProcessorStatus const & rhs) = default;
    CyEnvironmentalProcessorStatus & operator=(CyEnvironmentalProcessorStatus const & rhs) = default;
    std::string const cmd_name = "cy_environmental_processor_status";

    CmdField<float> initial_vco;
    CmdField<float> time_error;
    CmdField<float> best_vco;
    CmdField<uint32_t> ticks_since_last_update;
    CmdField<uint32_t> km;
    BmPllState state;
    CmdFieldIgnore<uint16_t> spare_1;
    CmdFieldHex<uint64_t> ep_serial_number;
    BmProcessorid processor_id;
    CmdFieldDuration<uint32_t> seconds_since_boot;
    CmdFieldDuration<uint32_t> seconds_since_resync;
    CmdField<uint32_t> number_of_resyncs;
    CmdField<uint32_t> q330_communication_errors;
    CmdField<uint32_t> ep_communication_errors;
    CmdFieldIgnore<uint16_t> spare_2;
    CmdField<uint16_t> sdi_devices_active;
    BmFirmwareversion firmware_version;
    BmFgEnvironmental environmental_flags;
    CmdField<uint16_t> analog_channels;
    CmdField<uint8_t> ep_model;
    CmdField<uint8_t> ep_revision;
    CmdField<uint32_t> gains;
    CmdField<uint16_t> input_voltage_to_ep;
    CmdField<uint16_t> internal_humidity;
    CmdField<uint32_t> built_in_pressure;
    CmdField<uint32_t> internal_temperature;
    CmdField<uint32_t> ad_input_channel_1;
    CmdField<uint32_t> ad_input_channel_2;
    CmdField<uint32_t> ad_input_channel_3;
    CmdFieldIgnore<uint32_t> spare_3;
    CmdField<uint8_t> sdi1_sdi_address;
    BmSdiphase sdi1_phase;
    BmSdidriver sdi1_driver_id;
    CmdField<uint8_t> sdi1_spare_1;
    CmdField<uint64_t, 6> sdi1_sensor_model;
    CmdFieldArrayUByte<11> sdi1_serial_number;
    CmdField<uint8_t> sdi1_spare_3;
    CmdField<uint32_t, 3> sdi1_sensor_version;
    CmdField<uint8_t> sdi1_spare_4;
    CmdField<uint8_t> sdi2_sdi_address;
    BmSdiphase sdi2_phase;
    BmSdidriver sdi2_driver_id;
    CmdField<uint8_t> sdi2_spare_1;
    CmdField<uint64_t, 6> sdi2_sensor_model;
    CmdFieldArrayUByte<11> sdi2_serial_number;
    CmdField<uint8_t> sdi2_spare_3;
    CmdField<uint32_t, 3> sdi2_sensor_version;
    CmdField<uint8_t> sdi2_spare_4;
    CmdField<uint8_t> sdi3_sdi_address;
    BmSdiphase sdi3_phase;
    BmSdidriver sdi3_driver_id;
    CmdField<uint8_t> sdi3_spare_1;
    CmdField<uint64_t, 6> sdi3_sensor_model;
    CmdFieldArrayUByte<11> sdi3_serial_number;
    CmdField<uint8_t> sdi3_spare_3;
    CmdField<uint32_t, 3> sdi3_sensor_version;
    CmdField<uint8_t> sdi3_spare_4;
    CmdField<uint8_t> sdi4_sdi_address;
    BmSdiphase sdi4_phase;
    BmSdidriver sdi4_driver_id;
    CmdField<uint8_t> sdi4_spare_1;
    CmdField<uint64_t, 6> sdi4_sensor_model;
    CmdFieldArrayUByte<11> sdi4_serial_number;
    CmdField<uint8_t> sdi4_spare_3;
    CmdField<uint32_t, 3> sdi4_sensor_version;
    CmdField<uint8_t> sdi4_spare_4;
    CmdFieldHex<uint64_t> adc_serial_number;
    BmAdcmodel adc_model;
    CmdField<uint8_t> adc_revision;
    CmdFieldIgnore<uint16_t> adc_spare_1;
    CmdFieldIgnore<uint32_t> adc_spare_2;
    CmdFieldIgnore<uint32_t> adc_spare_3;
    CmdFieldIgnore<uint32_t> adc_spare_4;
    CmdFieldIgnore<uint32_t> adc_spare_5;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CyEnvironmentalProcessorStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CY_ENVIRONMENTAL_PROCESSOR_STATUS_H
