// ** CyThreadStatus Class ** //
// Autogenerated in QDP Commands ** //
// Manzano Software //

#ifndef _MZN_CMD_CY_THREAD_STATUS_H
#define _MZN_CMD_CY_THREAD_STATUS_H

#include "command.h"

namespace mzn {
class CyThreadStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CyThreadStatus const & cmd);

public:

    explicit CyThreadStatus();
    ~CyThreadStatus() = default;

    CyThreadStatus(CyThreadStatus && rhs) = default;
    CyThreadStatus & operator=(CyThreadStatus && rhs) = default;
    CyThreadStatus(CyThreadStatus const & rhs) = default;
    CyThreadStatus & operator=(CyThreadStatus const & rhs) = default;
    std::string const cmd_name = "cy_thread_status";

    CmdField<uint64_t, 6> total_running_time;
    CmdField<uint8_t> priority;
    CmdField<uint8_t> priority_counter;
    CmdField<uint64_t, 6> time_since_last_run;
    BmFgThread thread_flags;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CyThreadStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CY_THREAD_STATUS_H
