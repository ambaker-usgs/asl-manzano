// ** CxDev Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_DEV_H
#define _MZN_CMD_CX_DEV_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxDev : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxDev const & cmd);

public:

    explicit CxDev();
    ~CxDev() = default;

    CxDev(CxDev && rhs) = default;
    CxDev & operator=(CxDev && rhs) = default;
    CxDev(CxDev const & rhs) = default;
    CxDev & operator=(CxDev const & rhs) = default;
    std::string const cmd_name = "cx_dev";

    CmdField<uint16_t> port_number;
    BmDevUnitid unit_id;
    CmdField<uint16_t> version;
    BmDevOpt options;
    CmdFieldHex<uint64_t> serial_number;
    CmdField<uint16_t> device_static_storage;
    CmdFieldDuration<uint16_t> seconds_since_heard;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxDev const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_DEV_H
