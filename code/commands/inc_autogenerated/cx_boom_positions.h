// ** CxBoomPositions Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_BOOM_POSITIONS_H
#define _MZN_CMD_CX_BOOM_POSITIONS_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxBoomPositions : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxBoomPositions const & cmd);

public:

    explicit CxBoomPositions();
    ~CxBoomPositions() = default;

    CxBoomPositions(CxBoomPositions && rhs) = default;
    CxBoomPositions & operator=(CxBoomPositions && rhs) = default;
    CxBoomPositions(CxBoomPositions const & rhs) = default;
    CxBoomPositions & operator=(CxBoomPositions const & rhs) = default;
    std::string const cmd_name = "cx_boom_positions";

    CmdField<int16_t> channel_1_boom;
    CmdField<int16_t> channel_2_boom;
    CmdField<int16_t> channel_3_boom;
    CmdField<int16_t> channel_4_boom;
    CmdField<int16_t> channel_5_boom;
    CmdField<int16_t> channel_6_boom;
    CmdField<int16_t> analog_positive_supply;
    CmdField<int16_t> analog_negative_supply;
    CmdField<int16_t> input_power;
    CmdField<int16_t> system_temperature;
    CmdField<int16_t> main_current;
    CmdField<int16_t> gps_antenna_current;
    CmdField<int16_t> seismometer_1_temperature;
    CmdField<int16_t> seismometer_2_temperature;
    CmdField<uint32_t> slave_processor_timeouts;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxBoomPositions const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_BOOM_POSITIONS_H
