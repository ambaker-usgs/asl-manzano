// ** CxGpsStatus Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_GPS_STATUS_H
#define _MZN_CMD_CX_GPS_STATUS_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxGpsStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxGpsStatus const & cmd);

public:

    explicit CxGpsStatus();
    ~CxGpsStatus() = default;

    CxGpsStatus(CxGpsStatus && rhs) = default;
    CxGpsStatus & operator=(CxGpsStatus && rhs) = default;
    CxGpsStatus(CxGpsStatus const & rhs) = default;
    CxGpsStatus & operator=(CxGpsStatus const & rhs) = default;
    std::string const cmd_name = "cx_gps_status";

    CmdField<uint16_t> gps_power_on_off_time;
    CmdField<bool, 2> gps_on;
    CmdField<uint16_t> number_of_satellites_used;
    CmdField<uint16_t> number_of_satellites_in_view;
    CmdFieldPstring<10> gps_time;
    CmdFieldPstring<12> gps_date;
    CmdFieldPstring<6> gps_fix;
    CmdFieldPstring<12> gps_height;
    CmdFieldPstring<14> gps_latitude;
    CmdFieldPstring<14> gps_longitude;
    CmdFieldTime<uint32_t, Time::k_shift_seconds_1970_2000> time_of_last_good_1pps;
    CmdField<uint32_t> total_checksum_errors;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxGpsStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_GPS_STATUS_H
