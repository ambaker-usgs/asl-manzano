#include <iostream>
#include <fstream>
#include <sstream>
#include <cstring>
#include <vector>
#include <bitset>
#include <cctype>
#include <algorithm>

#include <array>
int main() {
    std::cout << "crc_table builder" << std::endl;

    // *** CRC_TABLE *** //

    // crc_table file
    // if it doesn't exists, it creates it
    std::ofstream crc_fs;
    crc_fs.open("../../code/inc/crc_table.h",
        std::ofstream::out | std::ofstream::trunc);

    // file comments:
    crc_fs << "// ** CRC Table Classes ** //\n";
    crc_fs << "// Autogenerated in QDP Commands ** //\n";
    crc_fs << "// Manzano Software //\n";

   // guards:
    crc_fs << "\n#ifndef _MZN_CRC_H\n";
    crc_fs << "#define _MZN_CRC_H\n";

    crc_fs << "\n#include <array>";
    crc_fs << "\nnamespace mzn {";
    crc_fs << "\n   constexpr std::array<const unsigned long, 256> crc_table_ = {{\n";

    // *** actual calculation is done in this file ***
    // *** results go to crc_table.h as constexpr ***

    // rewrite in C++ of the code provided by Quanterra
    // on the communications user manual and open source lib330/libstructs.c
    // the results of the table are stored in the comm object
    // to be used during the crc calculation

    std::vector< std::bitset<32> > crc_table(256);

    // most significant bit in 32 bits numbers
    std::bitset<32> mask32bit (0x80000000);
    std::bitset<32> crc_polynomial (1443300200); // from q330 docs and lib330
    std::bitset<32> accum = 0;

    std::cout << "Creating CRC table\n" << std::endl;

    for (int table_index = 0; table_index <= 255; table_index++) {

        std::bitset<32> table_data((unsigned long)table_index << 24);
        accum = 0;

        //for 1 to 8 bits in a byte of table data
        for (int bits = 1; bits <= 8; bits++) {

            if (((table_data ^ accum) & mask32bit) != 0) { // MSB of 32bits is 1
                accum = (accum << 1) ^ crc_polynomial;

            } else {
                accum <<= 1;
            }

            table_data <<= 1;

        }

        //std::cout << "\ncount:crc "<< count << ": " << accum.to_ulong() << std::endl;
        crc_table[table_index] = accum;
        if (table_index != 255) {
            crc_fs << "        " << accum.to_ulong() << ", // " << table_index << "\n";
        } else {
            crc_fs << "        " << accum.to_ulong() << " // " << table_index << "\n";
        }
    }

    crc_fs << "}};\n" ;
    crc_fs << "\n} // end namespace";
    // guards end if
    crc_fs << "\n" << "#endif // _MZN_CRC_H\n";
    // close files
    crc_fs.close();
    return 0;
};


